// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  email         String    @unique
  password      String
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  tasks         Task[]    @relation("UserTasks")
  role          Role      @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Task {
  id           String       @id @default(uuid()) @map("_id")
  title        String
  description  String
  priority     Priority     @default(MEDIUM)
  status       Status       @default(TO_DO)
  currentStage CurrentStage @default(CURRENT)
  createdOn    DateTime     @default(now())
  updatedOn    DateTime?    @updatedAt
  comments     Comment[]    @relation("TaskComments")
  tags         String[]
  position     Int

  userId String @db.ObjectId
  user   User   @relation("UserTasks", fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid()) @map("_id")
  content   String
  taskId    String
  task      Task     @relation("TaskComments", fields: [taskId], references: [id])
  createdOn DateTime @default(now())
}

model Token {
  id      String    @id @default(uuid()) @map("_id")
  email   String
  token   String
  expires DateTime
  type    TokenType

  @@unique([email, token])
}

enum Role {
  ADMIN
  USER
  SUBSCRIBER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  TO_DO
  IN_PROGRESS
  DONE
  CANCEL
}

enum CurrentStage {
  CURRENT
  SCHEDULED
  ARCHIVED
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}
