name: Playwright Tests
on:
  schedule:
    - cron: '0 7 * * *'
  workflow_dispatch: # Allow manual triggering of the workflow
jobs:
  test_ui:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
        run: |
          xvfb-run npx playwright test --grep @UI
          echo $? > test-exit-code.txt
      - name: Read exit code
        id: test_exit_code
        run: echo "exit_code=$(cat test-exit-code.txt)" >> $GITHUB_ENV
      - name: Send Telegram notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ "$exit_code" -eq 0 ]; then
            MESSAGE="Playwright tests passed successfully ✅"
          else
            MESSAGE="Playwright tests failed ❌. Check the report for details."
          fi
          curl -X POST \
            https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
            -d chat_id=$TELEGRAM_CHAT_ID \
            -d text="$MESSAGE"
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-ui
          path: playwright-report/
          retention-days: 30

  # uncomment whet api tests are exists
  # test_api:
  #   timeout-minutes: 60
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: lts/*
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Install Playwright Browsers
  #       run: npx playwright install --with-deps
  #     - name: Run Playwright tests
  #       env:
  #         DATABASE_URL: ${{ secrets.DATABASE_URL }}
  #         AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
  #       run: xvfb-run npx playwright test --grep @API
  #     - uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: playwright-report-api
  #         path: playwright-report/
  #         retention-days: 30




# # Trigger the workflow daily at 2 AM UTC
# on:
#   schedule:
#     - cron: '0 9 * * *'  # 2 AM UTC daily
#   workflow_dispatch:  # Allow manual triggering of the workflow

# jobs:
#   e2e-tests:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # Set up Node.js environment
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'  # Use the version compatible with your project

#       # Install dependencies
#       - name: Install dependencies
#         run: npm install

# # Set up environment variables
# - name: Configure environment variables
#   env:
#     DATABASE_URL: ${{ secrets.DATABASE_URL }}  # Use secrets to store sensitive information
#     AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
#   run: echo "Environment variables set."

#       # Run Prisma migrations to set up the database (if necessary)
#       - name: Run migrations
#         run: npx prisma migrate deploy
#         env:
#           DATABASE_URL: ${{ secrets.DATABASE_URL }}

#       # Run Playwright tests
#       - name: Run Playwright E2E tests
#         run: npx playwright test
#         env:
#           DATABASE_URL: ${{ secrets.DATABASE_URL }}
#           AUTH_SECRET: ${{ secrets.AUTH_SECRET }}

#       # Upload test results (optional, for better reporting)
#       - name: Upload Playwright test results
#         if: failure()
#         uses: actions/upload-artifact@v3
#         with:
#           name: playwright-results
#           path: playwright-report/

# name: Playwright Tests

